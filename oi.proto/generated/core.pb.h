// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef PROTOBUF_INCLUDED_core_2eproto
#define PROTOBUF_INCLUDED_core_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto 

namespace protobuf_core_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_core_2eproto
namespace core {
class OIMessage;
class OIMessageDefaultTypeInternal;
extern OIMessageDefaultTypeInternal _OIMessage_default_instance_;
class OIMessage_OIHeader;
class OIMessage_OIHeaderDefaultTypeInternal;
extern OIMessage_OIHeaderDefaultTypeInternal _OIMessage_OIHeader_default_instance_;
class OIMessage_OIMultipartSpec;
class OIMessage_OIMultipartSpecDefaultTypeInternal;
extern OIMessage_OIMultipartSpecDefaultTypeInternal _OIMessage_OIMultipartSpec_default_instance_;
class OIMessage_OISource;
class OIMessage_OISourceDefaultTypeInternal;
extern OIMessage_OISourceDefaultTypeInternal _OIMessage_OISource_default_instance_;
}  // namespace core
namespace google {
namespace protobuf {
template<> ::core::OIMessage* Arena::CreateMaybeMessage<::core::OIMessage>(Arena*);
template<> ::core::OIMessage_OIHeader* Arena::CreateMaybeMessage<::core::OIMessage_OIHeader>(Arena*);
template<> ::core::OIMessage_OIMultipartSpec* Arena::CreateMaybeMessage<::core::OIMessage_OIMultipartSpec>(Arena*);
template<> ::core::OIMessage_OISource* Arena::CreateMaybeMessage<::core::OIMessage_OISource>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace core {

// ===================================================================

class OIMessage_OIHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.OIMessage.OIHeader) */ {
 public:
  OIMessage_OIHeader();
  virtual ~OIMessage_OIHeader();

  OIMessage_OIHeader(const OIMessage_OIHeader& from);

  inline OIMessage_OIHeader& operator=(const OIMessage_OIHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OIMessage_OIHeader(OIMessage_OIHeader&& from) noexcept
    : OIMessage_OIHeader() {
    *this = ::std::move(from);
  }

  inline OIMessage_OIHeader& operator=(OIMessage_OIHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OIMessage_OIHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OIMessage_OIHeader* internal_default_instance() {
    return reinterpret_cast<const OIMessage_OIHeader*>(
               &_OIMessage_OIHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OIMessage_OIHeader* other);
  friend void swap(OIMessage_OIHeader& a, OIMessage_OIHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OIMessage_OIHeader* New() const final {
    return CreateMaybeMessage<OIMessage_OIHeader>(NULL);
  }

  OIMessage_OIHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OIMessage_OIHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OIMessage_OIHeader& from);
  void MergeFrom(const OIMessage_OIHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OIMessage_OIHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 message_family = 1;
  void clear_message_family();
  static const int kMessageFamilyFieldNumber = 1;
  ::google::protobuf::uint32 message_family() const;
  void set_message_family(::google::protobuf::uint32 value);

  // fixed32 message_type = 2;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  ::google::protobuf::uint32 message_type() const;
  void set_message_type(::google::protobuf::uint32 value);

  // fixed64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // fixed64 sequence_nr = 5;
  void clear_sequence_nr();
  static const int kSequenceNrFieldNumber = 5;
  ::google::protobuf::uint64 sequence_nr() const;
  void set_sequence_nr(::google::protobuf::uint64 value);

  // fixed32 total_size = 3;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::uint32 total_size() const;
  void set_total_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:core.OIMessage.OIHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 message_family_;
  ::google::protobuf::uint32 message_type_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 sequence_nr_;
  ::google::protobuf::uint32 total_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OIMessage_OIMultipartSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.OIMessage.OIMultipartSpec) */ {
 public:
  OIMessage_OIMultipartSpec();
  virtual ~OIMessage_OIMultipartSpec();

  OIMessage_OIMultipartSpec(const OIMessage_OIMultipartSpec& from);

  inline OIMessage_OIMultipartSpec& operator=(const OIMessage_OIMultipartSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OIMessage_OIMultipartSpec(OIMessage_OIMultipartSpec&& from) noexcept
    : OIMessage_OIMultipartSpec() {
    *this = ::std::move(from);
  }

  inline OIMessage_OIMultipartSpec& operator=(OIMessage_OIMultipartSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OIMessage_OIMultipartSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OIMessage_OIMultipartSpec* internal_default_instance() {
    return reinterpret_cast<const OIMessage_OIMultipartSpec*>(
               &_OIMessage_OIMultipartSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OIMessage_OIMultipartSpec* other);
  friend void swap(OIMessage_OIMultipartSpec& a, OIMessage_OIMultipartSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OIMessage_OIMultipartSpec* New() const final {
    return CreateMaybeMessage<OIMessage_OIMultipartSpec>(NULL);
  }

  OIMessage_OIMultipartSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OIMessage_OIMultipartSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OIMessage_OIMultipartSpec& from);
  void MergeFrom(const OIMessage_OIMultipartSpec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OIMessage_OIMultipartSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 total_size = 1;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 1;
  ::google::protobuf::uint32 total_size() const;
  void set_total_size(::google::protobuf::uint32 value);

  // fixed32 total_parts = 2;
  void clear_total_parts();
  static const int kTotalPartsFieldNumber = 2;
  ::google::protobuf::uint32 total_parts() const;
  void set_total_parts(::google::protobuf::uint32 value);

  // fixed32 part_number = 3;
  void clear_part_number();
  static const int kPartNumberFieldNumber = 3;
  ::google::protobuf::uint32 part_number() const;
  void set_part_number(::google::protobuf::uint32 value);

  // fixed32 multipart_flags = 4;
  void clear_multipart_flags();
  static const int kMultipartFlagsFieldNumber = 4;
  ::google::protobuf::uint32 multipart_flags() const;
  void set_multipart_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:core.OIMessage.OIMultipartSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 total_size_;
  ::google::protobuf::uint32 total_parts_;
  ::google::protobuf::uint32 part_number_;
  ::google::protobuf::uint32 multipart_flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OIMessage_OISource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.OIMessage.OISource) */ {
 public:
  OIMessage_OISource();
  virtual ~OIMessage_OISource();

  OIMessage_OISource(const OIMessage_OISource& from);

  inline OIMessage_OISource& operator=(const OIMessage_OISource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OIMessage_OISource(OIMessage_OISource&& from) noexcept
    : OIMessage_OISource() {
    *this = ::std::move(from);
  }

  inline OIMessage_OISource& operator=(OIMessage_OISource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OIMessage_OISource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OIMessage_OISource* internal_default_instance() {
    return reinterpret_cast<const OIMessage_OISource*>(
               &_OIMessage_OISource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OIMessage_OISource* other);
  friend void swap(OIMessage_OISource& a, OIMessage_OISource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OIMessage_OISource* New() const final {
    return CreateMaybeMessage<OIMessage_OISource>(NULL);
  }

  OIMessage_OISource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OIMessage_OISource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OIMessage_OISource& from);
  void MergeFrom(const OIMessage_OISource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OIMessage_OISource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // string socket_id = 2;
  void clear_socket_id();
  static const int kSocketIdFieldNumber = 2;
  const ::std::string& socket_id() const;
  void set_socket_id(const ::std::string& value);
  #if LANG_CXX11
  void set_socket_id(::std::string&& value);
  #endif
  void set_socket_id(const char* value);
  void set_socket_id(const char* value, size_t size);
  ::std::string* mutable_socket_id();
  ::std::string* release_socket_id();
  void set_allocated_socket_id(::std::string* socket_id);

  // @@protoc_insertion_point(class_scope:core.OIMessage.OISource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  ::google::protobuf::internal::ArenaStringPtr socket_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OIMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.OIMessage) */ {
 public:
  OIMessage();
  virtual ~OIMessage();

  OIMessage(const OIMessage& from);

  inline OIMessage& operator=(const OIMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OIMessage(OIMessage&& from) noexcept
    : OIMessage() {
    *this = ::std::move(from);
  }

  inline OIMessage& operator=(OIMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OIMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OIMessage* internal_default_instance() {
    return reinterpret_cast<const OIMessage*>(
               &_OIMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OIMessage* other);
  friend void swap(OIMessage& a, OIMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OIMessage* New() const final {
    return CreateMaybeMessage<OIMessage>(NULL);
  }

  OIMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OIMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OIMessage& from);
  void MergeFrom(const OIMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OIMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OIMessage_OIHeader OIHeader;
  typedef OIMessage_OIMultipartSpec OIMultipartSpec;
  typedef OIMessage_OISource OISource;

  // accessors -------------------------------------------------------

  // bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .core.OIMessage.OIHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::core::OIMessage_OIHeader& _internal_header() const;
  public:
  const ::core::OIMessage_OIHeader& header() const;
  ::core::OIMessage_OIHeader* release_header();
  ::core::OIMessage_OIHeader* mutable_header();
  void set_allocated_header(::core::OIMessage_OIHeader* header);

  // .core.OIMessage.OIMultipartSpec multipart_spec = 2;
  bool has_multipart_spec() const;
  void clear_multipart_spec();
  static const int kMultipartSpecFieldNumber = 2;
  private:
  const ::core::OIMessage_OIMultipartSpec& _internal_multipart_spec() const;
  public:
  const ::core::OIMessage_OIMultipartSpec& multipart_spec() const;
  ::core::OIMessage_OIMultipartSpec* release_multipart_spec();
  ::core::OIMessage_OIMultipartSpec* mutable_multipart_spec();
  void set_allocated_multipart_spec(::core::OIMessage_OIMultipartSpec* multipart_spec);

  // .core.OIMessage.OISource source = 3;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  private:
  const ::core::OIMessage_OISource& _internal_source() const;
  public:
  const ::core::OIMessage_OISource& source() const;
  ::core::OIMessage_OISource* release_source();
  ::core::OIMessage_OISource* mutable_source();
  void set_allocated_source(::core::OIMessage_OISource* source);

  // @@protoc_insertion_point(class_scope:core.OIMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::core::OIMessage_OIHeader* header_;
  ::core::OIMessage_OIMultipartSpec* multipart_spec_;
  ::core::OIMessage_OISource* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OIMessage_OIHeader

// fixed32 message_family = 1;
inline void OIMessage_OIHeader::clear_message_family() {
  message_family_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIHeader::message_family() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIHeader.message_family)
  return message_family_;
}
inline void OIMessage_OIHeader::set_message_family(::google::protobuf::uint32 value) {
  
  message_family_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIHeader.message_family)
}

// fixed32 message_type = 2;
inline void OIMessage_OIHeader::clear_message_type() {
  message_type_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIHeader::message_type() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIHeader.message_type)
  return message_type_;
}
inline void OIMessage_OIHeader::set_message_type(::google::protobuf::uint32 value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIHeader.message_type)
}

// fixed32 total_size = 3;
inline void OIMessage_OIHeader::clear_total_size() {
  total_size_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIHeader::total_size() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIHeader.total_size)
  return total_size_;
}
inline void OIMessage_OIHeader::set_total_size(::google::protobuf::uint32 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIHeader.total_size)
}

// fixed64 timestamp = 4;
inline void OIMessage_OIHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OIMessage_OIHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIHeader.timestamp)
  return timestamp_;
}
inline void OIMessage_OIHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIHeader.timestamp)
}

// fixed64 sequence_nr = 5;
inline void OIMessage_OIHeader::clear_sequence_nr() {
  sequence_nr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OIMessage_OIHeader::sequence_nr() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIHeader.sequence_nr)
  return sequence_nr_;
}
inline void OIMessage_OIHeader::set_sequence_nr(::google::protobuf::uint64 value) {
  
  sequence_nr_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIHeader.sequence_nr)
}

// -------------------------------------------------------------------

// OIMessage_OIMultipartSpec

// fixed32 total_size = 1;
inline void OIMessage_OIMultipartSpec::clear_total_size() {
  total_size_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIMultipartSpec::total_size() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIMultipartSpec.total_size)
  return total_size_;
}
inline void OIMessage_OIMultipartSpec::set_total_size(::google::protobuf::uint32 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIMultipartSpec.total_size)
}

// fixed32 total_parts = 2;
inline void OIMessage_OIMultipartSpec::clear_total_parts() {
  total_parts_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIMultipartSpec::total_parts() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIMultipartSpec.total_parts)
  return total_parts_;
}
inline void OIMessage_OIMultipartSpec::set_total_parts(::google::protobuf::uint32 value) {
  
  total_parts_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIMultipartSpec.total_parts)
}

// fixed32 part_number = 3;
inline void OIMessage_OIMultipartSpec::clear_part_number() {
  part_number_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIMultipartSpec::part_number() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIMultipartSpec.part_number)
  return part_number_;
}
inline void OIMessage_OIMultipartSpec::set_part_number(::google::protobuf::uint32 value) {
  
  part_number_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIMultipartSpec.part_number)
}

// fixed32 multipart_flags = 4;
inline void OIMessage_OIMultipartSpec::clear_multipart_flags() {
  multipart_flags_ = 0u;
}
inline ::google::protobuf::uint32 OIMessage_OIMultipartSpec::multipart_flags() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OIMultipartSpec.multipart_flags)
  return multipart_flags_;
}
inline void OIMessage_OIMultipartSpec::set_multipart_flags(::google::protobuf::uint32 value) {
  
  multipart_flags_ = value;
  // @@protoc_insertion_point(field_set:core.OIMessage.OIMultipartSpec.multipart_flags)
}

// -------------------------------------------------------------------

// OIMessage_OISource

// string device_id = 1;
inline void OIMessage_OISource::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OIMessage_OISource::device_id() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OISource.device_id)
  return device_id_.GetNoArena();
}
inline void OIMessage_OISource::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.OIMessage.OISource.device_id)
}
#if LANG_CXX11
inline void OIMessage_OISource::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.OIMessage.OISource.device_id)
}
#endif
inline void OIMessage_OISource::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.OIMessage.OISource.device_id)
}
inline void OIMessage_OISource::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.OIMessage.OISource.device_id)
}
inline ::std::string* OIMessage_OISource::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:core.OIMessage.OISource.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OIMessage_OISource::release_device_id() {
  // @@protoc_insertion_point(field_release:core.OIMessage.OISource.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OIMessage_OISource::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.OISource.device_id)
}

// string socket_id = 2;
inline void OIMessage_OISource::clear_socket_id() {
  socket_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OIMessage_OISource::socket_id() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.OISource.socket_id)
  return socket_id_.GetNoArena();
}
inline void OIMessage_OISource::set_socket_id(const ::std::string& value) {
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.OIMessage.OISource.socket_id)
}
#if LANG_CXX11
inline void OIMessage_OISource::set_socket_id(::std::string&& value) {
  
  socket_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.OIMessage.OISource.socket_id)
}
#endif
inline void OIMessage_OISource::set_socket_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.OIMessage.OISource.socket_id)
}
inline void OIMessage_OISource::set_socket_id(const char* value, size_t size) {
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.OIMessage.OISource.socket_id)
}
inline ::std::string* OIMessage_OISource::mutable_socket_id() {
  
  // @@protoc_insertion_point(field_mutable:core.OIMessage.OISource.socket_id)
  return socket_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OIMessage_OISource::release_socket_id() {
  // @@protoc_insertion_point(field_release:core.OIMessage.OISource.socket_id)
  
  return socket_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OIMessage_OISource::set_allocated_socket_id(::std::string* socket_id) {
  if (socket_id != NULL) {
    
  } else {
    
  }
  socket_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket_id);
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.OISource.socket_id)
}

// -------------------------------------------------------------------

// OIMessage

// .core.OIMessage.OIHeader header = 1;
inline bool OIMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void OIMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::core::OIMessage_OIHeader& OIMessage::_internal_header() const {
  return *header_;
}
inline const ::core::OIMessage_OIHeader& OIMessage::header() const {
  const ::core::OIMessage_OIHeader* p = header_;
  // @@protoc_insertion_point(field_get:core.OIMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::core::OIMessage_OIHeader*>(
      &::core::_OIMessage_OIHeader_default_instance_);
}
inline ::core::OIMessage_OIHeader* OIMessage::release_header() {
  // @@protoc_insertion_point(field_release:core.OIMessage.header)
  
  ::core::OIMessage_OIHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::core::OIMessage_OIHeader* OIMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::core::OIMessage_OIHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:core.OIMessage.header)
  return header_;
}
inline void OIMessage::set_allocated_header(::core::OIMessage_OIHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.header)
}

// .core.OIMessage.OIMultipartSpec multipart_spec = 2;
inline bool OIMessage::has_multipart_spec() const {
  return this != internal_default_instance() && multipart_spec_ != NULL;
}
inline void OIMessage::clear_multipart_spec() {
  if (GetArenaNoVirtual() == NULL && multipart_spec_ != NULL) {
    delete multipart_spec_;
  }
  multipart_spec_ = NULL;
}
inline const ::core::OIMessage_OIMultipartSpec& OIMessage::_internal_multipart_spec() const {
  return *multipart_spec_;
}
inline const ::core::OIMessage_OIMultipartSpec& OIMessage::multipart_spec() const {
  const ::core::OIMessage_OIMultipartSpec* p = multipart_spec_;
  // @@protoc_insertion_point(field_get:core.OIMessage.multipart_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::core::OIMessage_OIMultipartSpec*>(
      &::core::_OIMessage_OIMultipartSpec_default_instance_);
}
inline ::core::OIMessage_OIMultipartSpec* OIMessage::release_multipart_spec() {
  // @@protoc_insertion_point(field_release:core.OIMessage.multipart_spec)
  
  ::core::OIMessage_OIMultipartSpec* temp = multipart_spec_;
  multipart_spec_ = NULL;
  return temp;
}
inline ::core::OIMessage_OIMultipartSpec* OIMessage::mutable_multipart_spec() {
  
  if (multipart_spec_ == NULL) {
    auto* p = CreateMaybeMessage<::core::OIMessage_OIMultipartSpec>(GetArenaNoVirtual());
    multipart_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:core.OIMessage.multipart_spec)
  return multipart_spec_;
}
inline void OIMessage::set_allocated_multipart_spec(::core::OIMessage_OIMultipartSpec* multipart_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete multipart_spec_;
  }
  if (multipart_spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multipart_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multipart_spec, submessage_arena);
    }
    
  } else {
    
  }
  multipart_spec_ = multipart_spec;
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.multipart_spec)
}

// .core.OIMessage.OISource source = 3;
inline bool OIMessage::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void OIMessage::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::core::OIMessage_OISource& OIMessage::_internal_source() const {
  return *source_;
}
inline const ::core::OIMessage_OISource& OIMessage::source() const {
  const ::core::OIMessage_OISource* p = source_;
  // @@protoc_insertion_point(field_get:core.OIMessage.source)
  return p != NULL ? *p : *reinterpret_cast<const ::core::OIMessage_OISource*>(
      &::core::_OIMessage_OISource_default_instance_);
}
inline ::core::OIMessage_OISource* OIMessage::release_source() {
  // @@protoc_insertion_point(field_release:core.OIMessage.source)
  
  ::core::OIMessage_OISource* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::core::OIMessage_OISource* OIMessage::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::core::OIMessage_OISource>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:core.OIMessage.source)
  return source_;
}
inline void OIMessage::set_allocated_source(::core::OIMessage_OISource* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.source)
}

// bytes body = 4;
inline void OIMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OIMessage::body() const {
  // @@protoc_insertion_point(field_get:core.OIMessage.body)
  return body_.GetNoArena();
}
inline void OIMessage::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.OIMessage.body)
}
#if LANG_CXX11
inline void OIMessage::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.OIMessage.body)
}
#endif
inline void OIMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.OIMessage.body)
}
inline void OIMessage::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.OIMessage.body)
}
inline ::std::string* OIMessage::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:core.OIMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OIMessage::release_body() {
  // @@protoc_insertion_point(field_release:core.OIMessage.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OIMessage::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:core.OIMessage.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_core_2eproto
