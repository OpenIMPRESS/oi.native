// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_core_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OIHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OIMultipartSpec;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OISource;
}  // namespace protobuf_core_2eproto
namespace core {
class OIMessage_OIHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OIMessage_OIHeader>
      _instance;
} _OIMessage_OIHeader_default_instance_;
class OIMessage_OIMultipartSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OIMessage_OIMultipartSpec>
      _instance;
} _OIMessage_OIMultipartSpec_default_instance_;
class OIMessage_OISourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OIMessage_OISource>
      _instance;
} _OIMessage_OISource_default_instance_;
class OIMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OIMessage>
      _instance;
} _OIMessage_default_instance_;
}  // namespace core
namespace protobuf_core_2eproto {
static void InitDefaultsOIMessage_OIHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_OIMessage_OIHeader_default_instance_;
    new (ptr) ::core::OIMessage_OIHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::OIMessage_OIHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OIHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOIMessage_OIHeader}, {}};

static void InitDefaultsOIMessage_OIMultipartSpec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_OIMessage_OIMultipartSpec_default_instance_;
    new (ptr) ::core::OIMessage_OIMultipartSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::OIMessage_OIMultipartSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OIMultipartSpec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOIMessage_OIMultipartSpec}, {}};

static void InitDefaultsOIMessage_OISource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_OIMessage_OISource_default_instance_;
    new (ptr) ::core::OIMessage_OISource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::OIMessage_OISource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OIMessage_OISource =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOIMessage_OISource}, {}};

static void InitDefaultsOIMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_OIMessage_default_instance_;
    new (ptr) ::core::OIMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::OIMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OIMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOIMessage}, {
      &protobuf_core_2eproto::scc_info_OIMessage_OIHeader.base,
      &protobuf_core_2eproto::scc_info_OIMessage_OIMultipartSpec.base,
      &protobuf_core_2eproto::scc_info_OIMessage_OISource.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OIMessage_OIHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OIMessage_OIMultipartSpec.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OIMessage_OISource.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OIMessage.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, message_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, total_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIHeader, sequence_nr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIMultipartSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIMultipartSpec, total_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIMultipartSpec, total_parts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIMultipartSpec, part_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OIMultipartSpec, multipart_flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OISource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OISource, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage_OISource, socket_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage, multipart_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::core::OIMessage, body_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::core::OIMessage_OIHeader)},
  { 10, -1, sizeof(::core::OIMessage_OIMultipartSpec)},
  { 19, -1, sizeof(::core::OIMessage_OISource)},
  { 26, -1, sizeof(::core::OIMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_OIMessage_OIHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_OIMessage_OIMultipartSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_OIMessage_OISource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_OIMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "core.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncore.proto\022\004core\"\270\003\n\tOIMessage\022(\n\006head"
      "er\030\001 \001(\0132\030.core.OIMessage.OIHeader\0227\n\016mu"
      "ltipart_spec\030\002 \001(\0132\037.core.OIMessage.OIMu"
      "ltipartSpec\022(\n\006source\030\003 \001(\0132\030.core.OIMes"
      "sage.OISource\022\014\n\004body\030\004 \001(\014\032t\n\010OIHeader\022"
      "\026\n\016message_family\030\001 \001(\007\022\024\n\014message_type\030"
      "\002 \001(\007\022\022\n\ntotal_size\030\003 \001(\007\022\021\n\ttimestamp\030\004"
      " \001(\006\022\023\n\013sequence_nr\030\005 \001(\006\032h\n\017OIMultipart"
      "Spec\022\022\n\ntotal_size\030\001 \001(\007\022\023\n\013total_parts\030"
      "\002 \001(\007\022\023\n\013part_number\030\003 \001(\007\022\027\n\017multipart_"
      "flags\030\004 \001(\007\0320\n\010OISource\022\021\n\tdevice_id\030\001 \001"
      "(\t\022\021\n\tsocket_id\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_core_2eproto
namespace core {

// ===================================================================

void OIMessage_OIHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OIMessage_OIHeader::kMessageFamilyFieldNumber;
const int OIMessage_OIHeader::kMessageTypeFieldNumber;
const int OIMessage_OIHeader::kTotalSizeFieldNumber;
const int OIMessage_OIHeader::kTimestampFieldNumber;
const int OIMessage_OIHeader::kSequenceNrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OIMessage_OIHeader::OIMessage_OIHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_OIMessage_OIHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.OIMessage.OIHeader)
}
OIMessage_OIHeader::OIMessage_OIHeader(const OIMessage_OIHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_family_, &from.message_family_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_size_) -
    reinterpret_cast<char*>(&message_family_)) + sizeof(total_size_));
  // @@protoc_insertion_point(copy_constructor:core.OIMessage.OIHeader)
}

void OIMessage_OIHeader::SharedCtor() {
  ::memset(&message_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_) -
      reinterpret_cast<char*>(&message_family_)) + sizeof(total_size_));
}

OIMessage_OIHeader::~OIMessage_OIHeader() {
  // @@protoc_insertion_point(destructor:core.OIMessage.OIHeader)
  SharedDtor();
}

void OIMessage_OIHeader::SharedDtor() {
}

void OIMessage_OIHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OIMessage_OIHeader::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OIMessage_OIHeader& OIMessage_OIHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_OIMessage_OIHeader.base);
  return *internal_default_instance();
}


void OIMessage_OIHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:core.OIMessage.OIHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&message_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_) -
      reinterpret_cast<char*>(&message_family_)) + sizeof(total_size_));
  _internal_metadata_.Clear();
}

bool OIMessage_OIHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.OIMessage.OIHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 message_family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &message_family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &message_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 total_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 sequence_nr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sequence_nr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.OIMessage.OIHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.OIMessage.OIHeader)
  return false;
#undef DO_
}

void OIMessage_OIHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.OIMessage.OIHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 message_family = 1;
  if (this->message_family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->message_family(), output);
  }

  // fixed32 message_type = 2;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->message_type(), output);
  }

  // fixed32 total_size = 3;
  if (this->total_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->total_size(), output);
  }

  // fixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->timestamp(), output);
  }

  // fixed64 sequence_nr = 5;
  if (this->sequence_nr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sequence_nr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:core.OIMessage.OIHeader)
}

::google::protobuf::uint8* OIMessage_OIHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:core.OIMessage.OIHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 message_family = 1;
  if (this->message_family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->message_family(), target);
  }

  // fixed32 message_type = 2;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->message_type(), target);
  }

  // fixed32 total_size = 3;
  if (this->total_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->total_size(), target);
  }

  // fixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->timestamp(), target);
  }

  // fixed64 sequence_nr = 5;
  if (this->sequence_nr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sequence_nr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.OIMessage.OIHeader)
  return target;
}

size_t OIMessage_OIHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.OIMessage.OIHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 message_family = 1;
  if (this->message_family() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 message_type = 2;
  if (this->message_type() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 sequence_nr = 5;
  if (this->sequence_nr() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 total_size = 3;
  if (this->total_size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OIMessage_OIHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.OIMessage.OIHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const OIMessage_OIHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OIMessage_OIHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.OIMessage.OIHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.OIMessage.OIHeader)
    MergeFrom(*source);
  }
}

void OIMessage_OIHeader::MergeFrom(const OIMessage_OIHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.OIMessage.OIHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_family() != 0) {
    set_message_family(from.message_family());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.sequence_nr() != 0) {
    set_sequence_nr(from.sequence_nr());
  }
  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
}

void OIMessage_OIHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.OIMessage.OIHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OIMessage_OIHeader::CopyFrom(const OIMessage_OIHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.OIMessage.OIHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OIMessage_OIHeader::IsInitialized() const {
  return true;
}

void OIMessage_OIHeader::Swap(OIMessage_OIHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OIMessage_OIHeader::InternalSwap(OIMessage_OIHeader* other) {
  using std::swap;
  swap(message_family_, other->message_family_);
  swap(message_type_, other->message_type_);
  swap(timestamp_, other->timestamp_);
  swap(sequence_nr_, other->sequence_nr_);
  swap(total_size_, other->total_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OIMessage_OIHeader::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OIMessage_OIMultipartSpec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OIMessage_OIMultipartSpec::kTotalSizeFieldNumber;
const int OIMessage_OIMultipartSpec::kTotalPartsFieldNumber;
const int OIMessage_OIMultipartSpec::kPartNumberFieldNumber;
const int OIMessage_OIMultipartSpec::kMultipartFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OIMessage_OIMultipartSpec::OIMessage_OIMultipartSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_OIMessage_OIMultipartSpec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.OIMessage.OIMultipartSpec)
}
OIMessage_OIMultipartSpec::OIMessage_OIMultipartSpec(const OIMessage_OIMultipartSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&multipart_flags_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(multipart_flags_));
  // @@protoc_insertion_point(copy_constructor:core.OIMessage.OIMultipartSpec)
}

void OIMessage_OIMultipartSpec::SharedCtor() {
  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multipart_flags_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(multipart_flags_));
}

OIMessage_OIMultipartSpec::~OIMessage_OIMultipartSpec() {
  // @@protoc_insertion_point(destructor:core.OIMessage.OIMultipartSpec)
  SharedDtor();
}

void OIMessage_OIMultipartSpec::SharedDtor() {
}

void OIMessage_OIMultipartSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OIMessage_OIMultipartSpec::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OIMessage_OIMultipartSpec& OIMessage_OIMultipartSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_OIMessage_OIMultipartSpec.base);
  return *internal_default_instance();
}


void OIMessage_OIMultipartSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:core.OIMessage.OIMultipartSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multipart_flags_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(multipart_flags_));
  _internal_metadata_.Clear();
}

bool OIMessage_OIMultipartSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.OIMessage.OIMultipartSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 total_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 total_parts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &total_parts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 part_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &part_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 multipart_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &multipart_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.OIMessage.OIMultipartSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.OIMessage.OIMultipartSpec)
  return false;
#undef DO_
}

void OIMessage_OIMultipartSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.OIMessage.OIMultipartSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 total_size = 1;
  if (this->total_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->total_size(), output);
  }

  // fixed32 total_parts = 2;
  if (this->total_parts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->total_parts(), output);
  }

  // fixed32 part_number = 3;
  if (this->part_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->part_number(), output);
  }

  // fixed32 multipart_flags = 4;
  if (this->multipart_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->multipart_flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:core.OIMessage.OIMultipartSpec)
}

::google::protobuf::uint8* OIMessage_OIMultipartSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:core.OIMessage.OIMultipartSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 total_size = 1;
  if (this->total_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->total_size(), target);
  }

  // fixed32 total_parts = 2;
  if (this->total_parts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->total_parts(), target);
  }

  // fixed32 part_number = 3;
  if (this->part_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->part_number(), target);
  }

  // fixed32 multipart_flags = 4;
  if (this->multipart_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->multipart_flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.OIMessage.OIMultipartSpec)
  return target;
}

size_t OIMessage_OIMultipartSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.OIMessage.OIMultipartSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 total_size = 1;
  if (this->total_size() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 total_parts = 2;
  if (this->total_parts() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 part_number = 3;
  if (this->part_number() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 multipart_flags = 4;
  if (this->multipart_flags() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OIMessage_OIMultipartSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.OIMessage.OIMultipartSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const OIMessage_OIMultipartSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OIMessage_OIMultipartSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.OIMessage.OIMultipartSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.OIMessage.OIMultipartSpec)
    MergeFrom(*source);
  }
}

void OIMessage_OIMultipartSpec::MergeFrom(const OIMessage_OIMultipartSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.OIMessage.OIMultipartSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
  if (from.total_parts() != 0) {
    set_total_parts(from.total_parts());
  }
  if (from.part_number() != 0) {
    set_part_number(from.part_number());
  }
  if (from.multipart_flags() != 0) {
    set_multipart_flags(from.multipart_flags());
  }
}

void OIMessage_OIMultipartSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.OIMessage.OIMultipartSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OIMessage_OIMultipartSpec::CopyFrom(const OIMessage_OIMultipartSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.OIMessage.OIMultipartSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OIMessage_OIMultipartSpec::IsInitialized() const {
  return true;
}

void OIMessage_OIMultipartSpec::Swap(OIMessage_OIMultipartSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OIMessage_OIMultipartSpec::InternalSwap(OIMessage_OIMultipartSpec* other) {
  using std::swap;
  swap(total_size_, other->total_size_);
  swap(total_parts_, other->total_parts_);
  swap(part_number_, other->part_number_);
  swap(multipart_flags_, other->multipart_flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OIMessage_OIMultipartSpec::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OIMessage_OISource::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OIMessage_OISource::kDeviceIdFieldNumber;
const int OIMessage_OISource::kSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OIMessage_OISource::OIMessage_OISource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_OIMessage_OISource.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.OIMessage.OISource)
}
OIMessage_OISource::OIMessage_OISource(const OIMessage_OISource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_id().size() > 0) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  socket_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket_id().size() > 0) {
    socket_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_id_);
  }
  // @@protoc_insertion_point(copy_constructor:core.OIMessage.OISource)
}

void OIMessage_OISource::SharedCtor() {
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OIMessage_OISource::~OIMessage_OISource() {
  // @@protoc_insertion_point(destructor:core.OIMessage.OISource)
  SharedDtor();
}

void OIMessage_OISource::SharedDtor() {
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OIMessage_OISource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OIMessage_OISource::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OIMessage_OISource& OIMessage_OISource::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_OIMessage_OISource.base);
  return *internal_default_instance();
}


void OIMessage_OISource::Clear() {
// @@protoc_insertion_point(message_clear_start:core.OIMessage.OISource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OIMessage_OISource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.OIMessage.OISource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), static_cast<int>(this->device_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "core.OIMessage.OISource.device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string socket_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket_id().data(), static_cast<int>(this->socket_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "core.OIMessage.OISource.socket_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.OIMessage.OISource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.OIMessage.OISource)
  return false;
#undef DO_
}

void OIMessage_OISource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.OIMessage.OISource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "core.OIMessage.OISource.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  // string socket_id = 2;
  if (this->socket_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket_id().data(), static_cast<int>(this->socket_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "core.OIMessage.OISource.socket_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->socket_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:core.OIMessage.OISource)
}

::google::protobuf::uint8* OIMessage_OISource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:core.OIMessage.OISource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "core.OIMessage.OISource.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // string socket_id = 2;
  if (this->socket_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket_id().data(), static_cast<int>(this->socket_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "core.OIMessage.OISource.socket_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->socket_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.OIMessage.OISource)
  return target;
}

size_t OIMessage_OISource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.OIMessage.OISource)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // string socket_id = 2;
  if (this->socket_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OIMessage_OISource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.OIMessage.OISource)
  GOOGLE_DCHECK_NE(&from, this);
  const OIMessage_OISource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OIMessage_OISource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.OIMessage.OISource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.OIMessage.OISource)
    MergeFrom(*source);
  }
}

void OIMessage_OISource::MergeFrom(const OIMessage_OISource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.OIMessage.OISource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.socket_id().size() > 0) {

    socket_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_id_);
  }
}

void OIMessage_OISource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.OIMessage.OISource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OIMessage_OISource::CopyFrom(const OIMessage_OISource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.OIMessage.OISource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OIMessage_OISource::IsInitialized() const {
  return true;
}

void OIMessage_OISource::Swap(OIMessage_OISource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OIMessage_OISource::InternalSwap(OIMessage_OISource* other) {
  using std::swap;
  device_id_.Swap(&other->device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  socket_id_.Swap(&other->socket_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OIMessage_OISource::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OIMessage::InitAsDefaultInstance() {
  ::core::_OIMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::core::OIMessage_OIHeader*>(
      ::core::OIMessage_OIHeader::internal_default_instance());
  ::core::_OIMessage_default_instance_._instance.get_mutable()->multipart_spec_ = const_cast< ::core::OIMessage_OIMultipartSpec*>(
      ::core::OIMessage_OIMultipartSpec::internal_default_instance());
  ::core::_OIMessage_default_instance_._instance.get_mutable()->source_ = const_cast< ::core::OIMessage_OISource*>(
      ::core::OIMessage_OISource::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OIMessage::kHeaderFieldNumber;
const int OIMessage::kMultipartSpecFieldNumber;
const int OIMessage::kSourceFieldNumber;
const int OIMessage::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OIMessage::OIMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_OIMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.OIMessage)
}
OIMessage::OIMessage(const OIMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_header()) {
    header_ = new ::core::OIMessage_OIHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_multipart_spec()) {
    multipart_spec_ = new ::core::OIMessage_OIMultipartSpec(*from.multipart_spec_);
  } else {
    multipart_spec_ = NULL;
  }
  if (from.has_source()) {
    source_ = new ::core::OIMessage_OISource(*from.source_);
  } else {
    source_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:core.OIMessage)
}

void OIMessage::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&header_)) + sizeof(source_));
}

OIMessage::~OIMessage() {
  // @@protoc_insertion_point(destructor:core.OIMessage)
  SharedDtor();
}

void OIMessage::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete multipart_spec_;
  if (this != internal_default_instance()) delete source_;
}

void OIMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OIMessage::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OIMessage& OIMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_OIMessage.base);
  return *internal_default_instance();
}


void OIMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:core.OIMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && multipart_spec_ != NULL) {
    delete multipart_spec_;
  }
  multipart_spec_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
  _internal_metadata_.Clear();
}

bool OIMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.OIMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .core.OIMessage.OIHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .core.OIMessage.OIMultipartSpec multipart_spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multipart_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .core.OIMessage.OISource source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.OIMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.OIMessage)
  return false;
#undef DO_
}

void OIMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.OIMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.OIMessage.OIHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .core.OIMessage.OIMultipartSpec multipart_spec = 2;
  if (this->has_multipart_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_multipart_spec(), output);
  }

  // .core.OIMessage.OISource source = 3;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_source(), output);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:core.OIMessage)
}

::google::protobuf::uint8* OIMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:core.OIMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.OIMessage.OIHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .core.OIMessage.OIMultipartSpec multipart_spec = 2;
  if (this->has_multipart_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_multipart_spec(), deterministic, target);
  }

  // .core.OIMessage.OISource source = 3;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_source(), deterministic, target);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.OIMessage)
  return target;
}

size_t OIMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.OIMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // .core.OIMessage.OIHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .core.OIMessage.OIMultipartSpec multipart_spec = 2;
  if (this->has_multipart_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *multipart_spec_);
  }

  // .core.OIMessage.OISource source = 3;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OIMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.OIMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OIMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OIMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.OIMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.OIMessage)
    MergeFrom(*source);
  }
}

void OIMessage::MergeFrom(const OIMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.OIMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_header()) {
    mutable_header()->::core::OIMessage_OIHeader::MergeFrom(from.header());
  }
  if (from.has_multipart_spec()) {
    mutable_multipart_spec()->::core::OIMessage_OIMultipartSpec::MergeFrom(from.multipart_spec());
  }
  if (from.has_source()) {
    mutable_source()->::core::OIMessage_OISource::MergeFrom(from.source());
  }
}

void OIMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.OIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OIMessage::CopyFrom(const OIMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.OIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OIMessage::IsInitialized() const {
  return true;
}

void OIMessage::Swap(OIMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OIMessage::InternalSwap(OIMessage* other) {
  using std::swap;
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(multipart_spec_, other->multipart_spec_);
  swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OIMessage::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::core::OIMessage_OIHeader* Arena::CreateMaybeMessage< ::core::OIMessage_OIHeader >(Arena* arena) {
  return Arena::CreateInternal< ::core::OIMessage_OIHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::core::OIMessage_OIMultipartSpec* Arena::CreateMaybeMessage< ::core::OIMessage_OIMultipartSpec >(Arena* arena) {
  return Arena::CreateInternal< ::core::OIMessage_OIMultipartSpec >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::core::OIMessage_OISource* Arena::CreateMaybeMessage< ::core::OIMessage_OISource >(Arena* arena) {
  return Arena::CreateInternal< ::core::OIMessage_OISource >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::core::OIMessage* Arena::CreateMaybeMessage< ::core::OIMessage >(Arena* arena) {
  return Arena::CreateInternal< ::core::OIMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
